#+TITLE: Tomaat
#+PROPERTY: header-args :mkdirp true

* Introduction
  The tomaat timer is a productivity tool. Tomaat is dutch for tomato
  and this program is inspired by the italian registered brand name
  linked to one such tool.

  The tool is based on the assumption that human beings are terrible
  at multitasking. Tomaat therefor times relative small periods, by
  default 25 minutes, in which a person is to focus on a single task
  exclusively, making as much progress as possible during this period.
  After this focus time, a break must be taken during which the person
  should *not* be focusing on the task. The break period is typically
  5 minutes, but after a few tomaten a longer break is advisable.

  This program allows to start a tomaat and label it with a name for
  the task to focus on. After the focus-period is over, the user is
  informed about this and is advised to take a break. This notice is
  done with a message box by default, but a silent mode, where
  reporting is only done to standard out, is available.

* Building and running
  The program is written in a literal style. From within emacs
  org-mode, this document can be tangled into source files, which will
  be put under a src folder, or be exported as an html file. The
  tangle.sh and export.sh files in the root of project automate these
  same tasks from the terminal.

  As the html document and the source files can be rebuild from this
  document at all times, these output targets are excluded from git in
  the .gitignore file.

** Clean the git working directory

   The following command removes the auto-produced artifacts from the
   working folder, if desired.

   #+BEGIN_SRC sh
     git clean -xdf
   #+END_SRC

** Export to html

   To export this org document to an html document, issue the
   following command. The example shows that firefox can show the
   created html file.

   #+BEGIN_SRC sh
     ./export.sh
     firefox tomaat.html
   #+END_SRC

** Tangle the source code

   And now the command to tangle the source code. This will produce a
   src directory with a tomaat sub-directory that contains our
   core.clj file.

   #+BEGIN_SRC sh
     ./tangle.sh
   #+END_SRC

** Start a tomaat from the terminal

   To start the program, make shure you first have [[Tangle the source code][tangled the source
   code]]. Then issue the following command.

   #+BEGIN_SRC sh
     clojure -m tomaat.core 'See hickey vids'

     # or override default of 25 minutes with 10 minutes
     # clojure -m tomaat.core 'See hickey vids' 10
   #+END_SRC

** Build a docker image and run in a container

   To build a docker image, we need to create a Dockerfile. Our image
   takes the clojure base image which already has leiningen and java
   installed. We add our [[The leiningen project file][project.clj file]] and have leiningen fetch all
   dependencies mentioned in it. Then we add the src folder to our app
   path and set up an endpoint-cmd combination. In docker this
   achieves that lein run is called with the 2 arguments in cmd unless
   the caller of ~docker run~ specifies overrides for these arguments.

   #+BEGIN_SRC dockerfile :tangle "Dockerfile"
     FROM clojure

     WORKDIR /app

     ADD ./project.clj /app

     RUN lein deps

     ADD ./src /app/src

     ENTRYPOINT ["lein", "run"]

     CMD ["Tomaat Running", "25"]
   #+END_SRC

   We can now build the docker image from this docker file. The
   dockerfile assumes that tangling has happened though, so we do that
   first. 
   
   #+BEGIN_SRC sh :tangle build-docker-image.sh :tangle-mode (identity #o755)
     ./tangle.sh
     sudo docker build -t tomaten:1.0.0 .
   #+END_SRC

* The leiningen project file
  Our leiningen project fiile is rather slimmed down. We only take a
  dependency on clojure itself (version 1.9) and point to the main
  entry point for the project.
  #+BEGIN_SRC clojure :tangle "project.clj"
    (defproject tomaat "1.0.0"
      :dependencies [[org.clojure/clojure "1.9.0"]]
      :main tomaat.core)
  #+END_SRC
* The core namespace
  The core namespace exposes the [[Define start-tomaat][start-tomaat]] function. But we need
  some helper functionality before we can define it. First we create
  the core namespace definition.

  We add the ~gen-class~ marker to have clojure generate a java class
  file for the namespace. This is necessary, as we point to this
  namespace from the leiningen project file as being the main
  namespace.
  
   #+BEGIN_SRC clojure :tangle "src/tomaat/core.clj"
     (ns tomaat.core
       (:gen-class))
   #+END_SRC

** A helper to express time periods
   We would like to express a duration as a vector of 2 elements;
   first a numeric value and second a keyword that names the time
   unit. Eg. ~[5 :minutes]~. Most javascript apis have millisecond
   accuracy, so let's define a function that can return how many
   milliseconds such a vector would express. At the moment there is
   only a need to express values in minutes (the function will throw
   an exception when encountering other, unrecognized, units).

   #+BEGIN_SRC clojure :tangle src/tomaat/core.clj
     (defn- ->ms
       "Takes a vector of 2 elements; a numeric value and a keyword
       resembling a time unit. Returns the duration represented in
       milliseconds."
       [[v unit]]
       (case unit
         :minute (* v 60 1000)
         :minutes (* v 60 1000)))
   #+END_SRC

** A helper to format the current time
   Our output will mention the current time. We want it reported with
   just the current hour and minutes. Function current-time-str
   returns such a string for the instance it is called.

   #+BEGIN_SRC clojure :tangle src/tomaat/core.clj
     (def time-format
       (java.time.format.DateTimeFormatter/ofPattern "HH:mm"))

     (defn- current-time-str
       "Returns a string describing the current time in the format 'HH:mm'."
       []
       (-> (java.time.LocalDateTime/now)
           (.format time-format)))
   #+END_SRC

** A helper to show formatted messages in the terminal
   Show messages with the current time in the terminal.

   #+BEGIN_SRC clojure :tangle "src/tomaat/core.clj"
     (defn- terminal-message
       "Prints a formatted message with the current time, task-label and
       message to standard-out."
       [task-label message]
       (println (str (current-time-str) " Tomaat '" task-label "' - " message)))
   #+END_SRC

** Define start-tomaat
   As mentioned, we want the user to pass a label that identifies the
   task at hand. We also would like the user to be able to override
   the default value for the work period duration, which we make 25
   minutes.

   After the function is called, it reports the current time with the
   task label, then blocks the current thread of execution for the
   work period duration, and then reports the end of the tomaat with
   the currenttime and the task label, and states that it is time to
   take a break.

   #+BEGIN_SRC clojure :tangle src/tomaat/core.clj
     (defn- start-tomaat
       "Takes a task label and options 'duration' and 'silent'. The duration
       is in the format [x :minutes]. If no duraction is given a default of
       25 minutes is used.

       The function reports that start of the tomaat and, after the
       duration expires, the end of it.

       If the 'silent' option is true, end reporting only happens in the
       terminal, otherwise both the terminal and a message box signal the
       end of the tomaat."
       [task-label & {:keys [duration silent] :or {duration [25 :minutes]}}]
       (terminal-message task-label (str "Started. (" (first duration) " min.)"))
       (Thread/sleep (->ms duration))
       (terminal-message task-label "Finished! Consider taking a break now."))
   #+END_SRC

** Create a main entrypoint
   In order to run as a cli program, and not just from the clojure
   repl, we define a main function that parses its arguments and calls
   the [[Define start-tomaat][start-tomaat]] function. The function explicitly calls
   System/exit to ensure that all java threads are stopped as soon as
   the messages are handled.

   #+BEGIN_SRC clojure :tangle src/tomaat/core.clj
     (defn -main
       "The main entry point to the program. Parses an optional numeric value
       as a value in minutes calls start-tomaat. If no numeric value is
       passed, start-tomaat is called without a duration."
       [& [task-label mins :as args]]
       (if mins
         (start-tomaat task-label :duration [(Integer/parseInt mins) :minutes])
         (start-tomaat task-label))
       (System/exit 0))
   #+END_SRC

