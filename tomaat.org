#+TITLE: Tomaat
#+PROPERTY: header-args :mkdirp true

* Introduction
  The tomaat timer is a productivity tool. Tomaat is dutch for tomato
  and this program is inspired by the italian registered brand name
  linked to one such tool.

  The tool is based on the assumption that human beings are terrible
  at multitasking. Tomaat therefor times relative small periods, by
  default 25 minutes, in which a person is to focus on a single task
  exclusively, making as much progress as possible during this period.
  After this focus time, a break must be taken during which the person
  should *not* be focusing on the task. The break period is typically
  5 minutes, but after a few tomaten a longer break is advisable.

  This program allows to start a tomaat and label it with a name for
  the task to focus on. After the focus-period is over, the user is
  informed about this and is advised to take a break.

* Building and running
  The program is written in a literal style. From within emacs
  org-mode, this document can be tangled into source files, which will
  be put under a src folder, or be exported as an html file. The
  tangle.sh and export.sh files in the root of project automate these
  same tasks from the terminal.

  As the html document and the source files can be rebuild from this
  document at all times, these output targets are excluded from git in
  the .gitignore file.

** Clean the git working directory

   The following command removes the auto-produced artifacts from the
   working folder, if desired.

   #+BEGIN_SRC sh
     git clean -xdf
   #+END_SRC

** Export to html

   To export this org document to an html document, issue the
   following command. The example shows that firefox can show the
   created html file.

   #+BEGIN_SRC sh
     ./export.sh
     firefox tomaat.html
   #+END_SRC

** Tangle the source code

   And now the command to tangle the source code. This will produce a
   src directory with a tomaat sub-directory that contains our
   core.clj file.

   #+BEGIN_SRC sh
     ./tangle.sh
   #+END_SRC

** Start a tomaat from the terminal

   To start the program, make shure you first have [[Tangle the source code][tangled the source
   code]]. Then issue the following command.

   #+BEGIN_SRC sh
     clojure -m tomaat.core 'See hickey vids'

     # or override default of 25 minutes with 10 minutes
     # clojure -m tomaat.core 'See hickey vids' 10
   #+END_SRC

* The core namespace
  The core namespace exposes the [[Define start-tomaat][start-tomaat]] function. But we need
  some helper functionality before we can define it. First we create
  the core namespace definition. At the moment there are no
  dependencies. The [[A helper to print the current time][current-time-str]] function below uses some
  java.time types, but as their usage is limited to just one function
  the namespace does not import them.

   #+BEGIN_SRC clojure :tangle "src/tomaat/core.clj"
     (ns tomaat.core)
   #+END_SRC

** A helper to express time periods
   We would like to express a duration as a vector of 2 elements;
   first a numeric value and second a keyword that names the time
   unit. Eg. ~[5 :minutes]~. Most javascript apis have millisecond
   accuracy, so let's define a function that can return how many
   milliseconds such a vector would express. At the moment there is
   only a need to express values in minutes (the function will throw
   an exception when encountering other, unrecognized, units).

   #+BEGIN_SRC clojure :tangle src/tomaat/core.clj
     (defn- ->ms
       "Takes a vector of 2 elements; a numeric value and a keyword
       resembling a time unit. Returns the duration represented in
       milliseconds."
       [[v unit]]
       (case unit
         :minute (* v 60 1000)
         :minutes (* v 60 1000)))
   #+END_SRC

** A helper to print the current time
   Our output will mention the current time. We want it printed with
   just the current hour and minutes. Function current-time-str
   returns such a string for the instance it is called.

   #+BEGIN_SRC clojure :tangle src/tomaat/core.clj
     (def time-format
       (java.time.format.DateTimeFormatter/ofPattern "HH:mm"))

     (defn current-time-str
       "Returns a string describing the current time in the format 'HH:mm'."
       []
       (-> (java.time.LocalDateTime/now)
           (.format time-format)))
   #+END_SRC

** Define start-tomaat
   As mentioned, we want the user to pass a label that identifies the
   task at hand. We also would like the user to be able to override
   the default value for the work period duration, which we make 25
   minutes.

   After the function is called, it reports the current time with the
   task label, then blocks the current thread of execution for the
   work period duration, and then reports the end of the tomaat with
   the currenttime and the task label, and states that it is time to
   take a break.

   #+BEGIN_SRC clojure :tangle src/tomaat/core.clj
     (defn start-tomaat
       "Takes a task label and an optional duration in the
       format [x :minutes], reports the start of the tomaat, waits for the
       duration to expire, and reports the end of the tomaat. If no
       duraction is given a default of 25 minutes is used."
       ([task-label] (start-tomaat task-label [25 :minutes]))
       ([task-label duration]
        (println (str (current-time-str) " -- Tomaat '" task-label "' started."))
        (Thread/sleep (->ms duration))
        (println (str (current-time-str) " -- Tomaat '" task-label "' finished. "
                      "Please consider taking a break now."))))

   #+END_SRC

** Create a main entrypoint
   In order to run as a cli program, and not just from the clojure
   repl, we define a main function that parses its arguments and calls
   the [[Define start-tomaat][start-tomaat]] function.

   #+BEGIN_SRC clojure :tangle src/tomaat/core.clj
     (defn -main
       "The main entry point to the program. Parses an optional numeric value
       as a value in minutes calls start-tomaat. If no numeric value is
       passed, start-tomaat is called without a duration."
       [& [task-label mins :as args]]
       #_(println args)
       (if mins
         (start-tomaat task-label [(Integer/parseInt mins) :minutes])
         (start-tomaat task-label)))
   #+END_SRC
